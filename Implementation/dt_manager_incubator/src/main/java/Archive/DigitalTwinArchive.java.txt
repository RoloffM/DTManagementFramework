package Archive;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.xml.parsers.ParserConfigurationException;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.eclipse.basyx.aas.metamodel.api.IAssetAdministrationShell;
import org.eclipse.basyx.aas.metamodel.map.descriptor.SubmodelDescriptor;
import org.eclipse.basyx.components.aas.aasx.AASXPackageManager;
import org.eclipse.basyx.submodel.metamodel.api.ISubmodel;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.ISubmodelElement;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.dataelement.IProperty;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.operation.IOperation;
import org.eclipse.basyx.submodel.metamodel.connected.submodelelement.dataelement.ConnectedProperty;
import org.eclipse.basyx.submodel.metamodel.connected.submodelelement.operation.ConnectedOperation;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.property.Property;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.operation.Operation;
import org.eclipse.basyx.support.bundle.AASBundle;
import org.eclipse.basyx.vab.manager.VABConnectionManager;
import org.eclipse.basyx.vab.modelprovider.api.IModelProvider;
import org.eclipse.milo.opcua.stack.core.types.builtin.DataValue;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttPersistenceException;
import org.json.JSONObject;
import org.xml.sax.SAXException;

import DTManager.Clock;
import DTManager.DigitalTwin;
import DTManager.DigitalTwinInterface;
import DTManager.Endpoint;
import DTManager.FMIEndpoint;
import DTManager.RabbitMQEndpoint;
import DTManager.TwinConfiguration;


public class DigitalTwinArchive implements DigitalTwinInterface {
	
	public Endpoint endpoint;
	@Deprecated
	int eventCounter = 0;
	public List<Property> attributes = null;
	public List<Operation> operations = null;
	public List<ConnectedProperty> connectedAttributes = null;
	public List<ConnectedOperation> connectedOperations = null;
	private Clock clock;
	private String name;
	private TwinConfiguration config;
	
	// Specific to AAS
	public IAssetAdministrationShell aas;
	public Set<ISubmodel> submodels;
	public ISubmodel technicalDataSubmodel;
	public ISubmodel operationalDataSubmodel;
	public SubmodelDescriptor dtDescriptor;
	public VABConnectionManager vabConnectionManagerVABServer;
	public IModelProvider connectedModel;
	
	
	public DigitalTwinArchive(String name, TwinConfiguration config) {
		// TODO Auto-generated constructor stub
		this.name = name;
		this.config = config;
		if (config.conf.hasPath("rabbitmq")) {
			this.endpoint = new RabbitMQEndpoint(config);
		} else if (config.conf.hasPath("fmi")){
			this.endpoint = new FMIEndpoint(config);
			List<Double> args = new ArrayList<Double>();
			args.add(0.0);
			this.endpoint.executeOperation("initializeSimulation",args);
		}

	}
	
	public DigitalTwinArchive getEmptyClone() {
		DigitalTwinArchive result = new DigitalTwinArchive(this.name, this.config);
		return result;
	}


	public void registerOperations(List<Operation> operations) {
		this.operations = operations;
		for (Operation op : operations) {
			this.endpoint.registerOperation(this.name,op);
		}
		
	}
	
	public void registerConnectedOperations(List<ConnectedOperation> operations) {
		this.connectedOperations = operations;
		for (ConnectedOperation op : operations) {
			this.endpoint.registerConnectedOperation(this.name,op);
		}
		
	}

	public void registerAttributes(List<Property> attributes) {
		this.attributes = attributes;
		for (Property prop : attributes) {
			this.endpoint.registerAttribute(this.name,prop); // should be an asynchronous function with callback every time a message arrives
		}
		
	}
	
	public void registerConnectedAttributes(List<ConnectedProperty> attributes) {
		this.connectedAttributes = attributes;
		for (ConnectedProperty prop : attributes) {
			this.endpoint.registerConnectedAttribute(this.name,prop); // should be an asynchronous function with callback every time a message arrives
		}
		
	}

	public Object getAttributeValue(String attrName) {
		if (this.endpoint instanceof RabbitMQEndpoint) {
			Map<String,ConnectedProperty> map = new HashMap<String,ConnectedProperty>();
			for (ConnectedProperty i : this.connectedAttributes) map.put(i.getIdShort(),i);
			IProperty tmpProperty = map.get(attrName);
			Object value = tmpProperty.getValue();
			return value;
		}else if(this.endpoint instanceof FMIEndpoint) {
			return this.endpoint.getAttributeValue(attrName);
		}
		return null;		
	}
	
	@Deprecated
	public Object getAttributeValueAt(String attrName, Timestamp at) {
		// TODO Auto-generated method stub
		return null;
	}

	@Deprecated
	public List<Object> getAttributeValueAt(List<String> attrNames, Timestamp at) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Deprecated
	public DataValue getAttributeValueDelta(String attrName, int numberOfEvents) {
		// TODO Auto-generated method stub
		return null;
	}

	public void setAttributeValue(String attrName, Object val) {
		if (this.endpoint instanceof RabbitMQEndpoint) {
			Map<String,ConnectedProperty> map = new HashMap<String,ConnectedProperty>();
			for (ConnectedProperty i : this.connectedAttributes) map.put(i.getIdShort(),i);
			IProperty tmpProperty = map.get(attrName);
			tmpProperty.setValue(val);
		} else if (this.endpoint instanceof FMIEndpoint) {
			this.endpoint.setAttributeValue(attrName, Double.valueOf(val.toString()));
		}
		
	}
	
	@Deprecated
	public void setAttributeValueAt(String attrName, Object val, Timestamp at) {
		// TODO Auto-generated method stub
		
	}

	public Object executeOperation(String opName, List<?> arguments) {
		if (this.endpoint instanceof RabbitMQEndpoint) {
			
			/*Map<String,ConnectedOperation> map = new HashMap<String,ConnectedOperation>();
			for (ConnectedOperation i : this.connectedOperations) map.put(i.getIdShort(),i);
			//IOperation op = this.getConnectedOperations().get(opName);
			IOperation op = map.get(opName);
			*/
			
			/***** Temporary Solution  ******/
			if (arguments == null) {
				this.endpoint.executeOperation(opName, null);
			}else {
				/*List<String> routingKeys = (List<String>) arguments.get(0);
				List<String> messages = (List<String>) arguments.get(1);
				this.endpoint.send(messages.get(0), routingKeys.get(0));
				this.endpoint.send(messages.get(1), routingKeys.get(1));
				*/
				this.endpoint.executeOperation(opName, arguments);
			}
		} else if(this.endpoint instanceof FMIEndpoint) {
			this.endpoint.executeOperation(opName, arguments);
			/*if (opName.equals("doStep")) {
				double stepSize = (double) arguments.get(0);
				if (arguments.size() > 1) {
					Map<String,Double> args = (Map<String, Double>) arguments.get(1);
					for (Map.Entry<String, Double> entry : args.entrySet()) {
					    this.endpoint.setAttributeValue(entry.getKey(), entry.getValue());
					}
				}
				this.endpoint.doStep(stepSize);
			} else if(opName.equals("terminateSimulation")) {
				this.endpoint.terminateSimulation();
			} else if(opName.equals("reinitializeFilter")) {
				double stepSize = (double) arguments.get(0);
				double initialHeatTemperature = (double) arguments.get(1);
				double initialBoxTemperature = (double) arguments.get(2);
				this.endpoint.reinitializeFilter(stepSize, initialHeatTemperature, initialBoxTemperature);
			}else if(opName.equals("heatingOperation")) {
				this.endpoint.executeHeatingOperation();
			}else if(opName.equals("coolingOperation")) {
				this.endpoint.executeCoolingOperation();
			}*/
			
		}
		
		/***** NOT FUNCTIONAL WITH BASYX *****/
		/*if (arguments == null) {
			op.invoke();
		}else {
			op.invoke(arguments);
		}*/
		
		/***** ONLY FUNCTIONAL WITH VAB *****/
		/*String preffix = "aas/submodels/OperationalData/submodel/submodelElements/Operations/";
		String suffix = "/invoke";
		if (arguments == null) {
			connectedModel.invokeOperation(preffix + opName + suffix);
			//this.getOperations().get(opName).invoke();
		}else {
			connectedModel.invokeOperation(preffix + opName + suffix);
			//this.getOperations().get(opName).invoke(arguments);
		}*/
		return null;
	}
	
	@Deprecated
	public Object executeOperationAt(String opName, List<?> arguments, Timestamp at) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Deprecated
	public Object executeOperationDelta(String opName, List<?> arguments, int numberOfEvents) {
		// TODO Auto-generated method stub
		return null;
	}

	@Deprecated
	public void increaseEventCounter() {
		// TODO Auto-generated method stub
		this.eventCounter = this.eventCounter + 1;
	}
	
	@Override
	public Clock getTime() {
		return this.clock;
	}

	@Override
	public void setTime(Clock clock) {
		this.clock = clock;
	}
	
	/****** Specific to AAS *******/
	// Not been used
	/*private List<Operation> setOperations(Map<String, IOperation> operationsMap) {
		Operation heatingOperation = (Operation) operationsMap.get("heating_operation");

		Function<Object[], Object> heatingOperationFunction = (arguments) -> {
			// System.out.println("heating_operation from invoke");
			if (arguments.length != 0) {
				String topic = "incubator.hardware.gpio.heater.on";
				String topic_2 = "incubator.hardware.gpio.fan.off";
				String msg = "{\"heater\":true}";
				String msg_fan = "{\"fan\":false}";
				
				this.endpoint.send(msg,topic);
				this.endpoint.send(msg_fan,topic_2);
				
				List args = new ArrayList<>();
				args.add("{\"heater\":true}");
				args.add("{\"fan\":false}");
				this.endpoint.execute(this.name, heatingOperation, args, topic, msg);
			}
			return null;
		};
		heatingOperation.setInvokable(heatingOperationFunction);
		
		Operation coolingOperation = (Operation) operationsMap.get("heating_operation");

		Function<Object[], Object> coolingOperationFunction = (arguments) -> {
			// System.out.println("cooling_operation from invoke");
			if (arguments.length != 0) {
				String topic = "incubator.hardware.gpio.heater.off";
				String topic_2 = "incubator.hardware.gpio.fan.on";
				String msg = "{\"heater\":false}";
				String msg_fan = "{\"fan\":true}";
				
				this.endpoint.send(msg,topic);
				this.endpoint.send(msg_fan,topic_2);
				
				List args = new ArrayList<>();
				args.add("{\"heater\":false}");
				args.add("{\"fan\":true}");
				
				this.endpoint.execute(this.name, coolingOperation, args, topic, msg);
				
			}
			return null;
		};
		coolingOperation.setInvokable(coolingOperationFunction);
		String preffix = this.name;
		dtDescriptor = new SubmodelDescriptor(
				operationalDataSubmodel,
				"http://localhost:4005/dtframeworkVAB/" + preffix + "/operationalDataSubmodel/submodel");
		
		List<Operation> operations = new ArrayList<Operation>();
		return operations;
	}*/

	
	/*** Specific to VAB ***/
	public void setVABConnectionManager(VABConnectionManager manager) {
		this.vabConnectionManagerVABServer = manager;
		this.connectedModel = this.vabConnectionManagerVABServer.connectToVABElement(this.name);
	}



}
